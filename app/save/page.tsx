"use client";
import { useEffect, useState } from "react";
import Link from "next/link";
import { Sparkles, Plus, Eye, ExternalLink, Wand2, Save, Link as LinkIcon } from "lucide-react";
import { getConnectedAccount } from "@/lib/hashconnect";
import dynamic from "next/dynamic";

const WalletConnectButton = dynamic(() => import('@/app/components/WalletConnect'), { ssr: false });

// DB shape from Supabase
type PaymentLink = {
  id: string;
  title: string;
  to_account: string;
  amount: number;
  memo: string | null;
  description: string | null;
  component_code: string | null;
  total_paid: number;
  payments_count: number;
  created_at: string;
  updated_at: string;
};

export default function SavePage() {
  const [to, setTo] = useState("");
  const [prompt, setPrompt] = useState("");
  // Generated by LLM
  const [genTitle, setGenTitle] = useState<string>("");
  const [genAmount, setGenAmount] = useState<number | null>(null);
  const [genMemo, setGenMemo] = useState<string>("");
  const [genDescription, setGenDescription] = useState<string>("");
  const [genComponentHtml, setGenComponentHtml] = useState<string>("");
  const [loadingGen, setLoadingGen] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [savedId, setSavedId] = useState<string | null>(null);
  const [connectedAccount, setConnectedAccount] = useState<string | null>(null);
  const [links, setLinks] = useState<PaymentLink[]>([]);

  useEffect(() => {
    setConnectedAccount(getConnectedAccount());
    // load from Supabase via API
    refreshLinks();
  }, []);

  const hederaIdPattern = /^\d+\.\d+\.\d+$/;

  const refreshLinks = async () => {
    try {
      const res = await fetch("/api/links", { cache: "no-store" });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to load links");
      setLinks(data.links || []);
    } catch (e) {
      // ignore list error visually
    }
  };

  const onConnect = (accountId: string) => {
    setConnectedAccount(accountId);
    if (accountId) {
      localStorage.setItem('connectedAccount', accountId);
    }
  };

  const onGenerate = async () => {
    setError(null);
    setSavedId(null);
    setLoadingGen(true);
    setGenTitle("");
    setGenAmount(null);
    setGenMemo("");
    setGenDescription("");
    setGenComponentHtml("");

    if (!to.trim()) {
      setError("Recipient account ID is required (e.g. 0.0.1234)");
      setLoadingGen(false);
      return;
    }

    if (!hederaIdPattern.test(to.trim())) {
      setError("Recipient must be a Hedera account ID like 0.0.1234");
      setLoadingGen(false);
      return;
    }

    if (!prompt.trim()) {
      setError("Please describe what the payment link is for");
      setLoadingGen(false);
      return;
    }

    try {
      const res = await fetch("/api/generate-link", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ recipient: to.trim(), prompt: prompt.trim() }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to generate link");
      setGenTitle(data.title || "Payment");
      setGenAmount(Number(data.amount));
      setGenMemo(data.memo || "");
      setGenDescription(data.description || "");
      setGenComponentHtml(data.componentHtml || "");
    } catch (e: any) {
      setError(e?.message || "Generation failed");
    } finally {
      setLoadingGen(false);
    }
  };

  const sanitizeHtml = (html: string) =>
    html
      .replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi, "")
      .replace(/ on[a-z]+="[^"]*"/gi, "")
      .replace(/ on[a-z]+='[^']*'/gi, "");

  const onSave = async (e: React.FormEvent) => {
    e.preventDefault();
    setSavedId(null);
    setError(null);

    if (!to.trim()) {
      setError("Recipient account ID is required (e.g. 0.0.1234)");
      return;
    }

    if (!hederaIdPattern.test(to.trim())) {
      setError("Recipient must be a Hedera account ID like 0.0.1234");
      return;
    }

    if (!genAmount || !Number.isFinite(genAmount) || genAmount <= 0) {
      setError("Generated amount is invalid");
      return;
    }

    if (!genTitle.trim()) {
      setError("Generated title missing");
      return;
    }

    try {
      const res = await fetch("/api/links", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title: genTitle.trim(),
          to: to.trim(),
          amount: Number(genAmount),
          memo: genMemo || null,
          description: genDescription || null,
          componentCode: genComponentHtml ? sanitizeHtml(genComponentHtml) : null,
        }),
      });
      const data = await res.json();
      if (!res.ok) throw new Error(data?.error || "Failed to save link");
      setSavedId(data.link.id);
      await refreshLinks();
    } catch (e: any) {
      setError(e?.message || "Failed to save link");
    }
  };

  const handleLinkClick = (linkId: string) => {
    console.log(`Opening link: /pay/${linkId}`);
  };

  const handlePayListClick = () => {
    console.log("Navigating to /pay");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse" style={{animationDelay: '2s'}}></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-60 h-60 bg-violet-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-pulse" style={{animationDelay: '4s'}}></div>
      </div>

      {/* Floating particles */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {[...Array(15)].map((_, i) => (
          <div
            key={i}
            className="absolute w-1 h-1 bg-purple-300 rounded-full opacity-30"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animation: `float ${3 + Math.random() * 4}s ease-in-out infinite`,
              animationDelay: `${Math.random() * 5}s`
            }}
          />
        ))}
      </div>

      <main className="relative z-10 flex min-h-screen flex-col items-center gap-6 p-8">
        {/* Header */}
        <div className="w-full max-w-4xl backdrop-blur-md bg-white/10 border border-white/20 rounded-2xl p-6 shadow-xl">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="relative">
                <div className="w-12 h-12 bg-gradient-to-br from-purple-400 to-pink-400 rounded-xl flex items-center justify-center backdrop-blur-sm shadow-lg">
                  <Link href="/">
                  <Sparkles className="w-6 h-6 text-white" />
                  </Link>
                </div>
                <div className="absolute inset-0 bg-gradient-to-br from-purple-400 to-pink-400 rounded-xl blur opacity-50"></div>
              </div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-white via-purple-200 to-pink-200 bg-clip-text text-transparent">
                Create Payment Link with HashLinks
              </h1>
            </div>
            
            <WalletConnectButton onConnect={onConnect} />
          </div>
        </div>

        {/* Main Form */}
        <form onSubmit={onSave} className="w-full max-w-4xl backdrop-blur-md bg-white/10 border border-white/20 rounded-2xl p-8 shadow-xl space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <label className="block text-sm font-medium text-purple-200">Recipient Account ID</label>
              <input
                value={to}
                onChange={(e) => setTo(e.target.value)}
                placeholder="0.0.1234"
                className="w-full backdrop-blur-sm bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-purple-300/70
                           focus:border-purple-400 focus:ring-2 focus:ring-purple-400/50 transition-all duration-300"
              />
            </div>
          </div>

          <div className="space-y-2">
            <label className="block text-sm font-medium text-purple-200">Describe your payment link</label>
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="e.g. Make a payment link for a donation for disabled children for donation of 20 HBAR"
              className="w-full backdrop-blur-sm bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-purple-300/70
                         focus:border-purple-400 focus:ring-2 focus:ring-purple-400/50 transition-all duration-300 min-h-[120px] resize-none"
            />
            <button 
              type="button" 
              onClick={onGenerate} 
              disabled={loadingGen}
              className="group relative px-6 py-3 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-xl text-white font-semibold
                         hover:from-indigo-600 hover:to-purple-600 transform hover:scale-105 transition-all duration-300
                         shadow-lg hover:shadow-indigo-500/25 disabled:opacity-50 disabled:cursor-not-allowed
                         flex items-center gap-2"
            >
              <Wand2 className="w-4 h-4" />
              {loadingGen ? (
                <>
                  <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
                  Generating...
                </>
              ) : (
                "Generate with AI"
              )}
              <div className="absolute inset-0 bg-gradient-to-r from-indigo-500 to-purple-500 rounded-xl blur opacity-50 -z-10 group-hover:opacity-75 transition-opacity"></div>
            </button>
          </div>

          {/* Generated Preview */}
          {(genTitle || genAmount || genDescription || genComponentHtml) && (
            <div className="backdrop-blur-sm bg-white/5 border border-white/20 rounded-xl p-6 space-y-4">
              <div className="flex items-center gap-2 text-purple-200 font-medium">
                <Eye className="w-4 h-4" />
                Generated Preview
              </div>
              
              {genComponentHtml ? (
                <div className="rounded-xl border border-white/20 overflow-hidden backdrop-blur-sm bg-white/5" 
                     dangerouslySetInnerHTML={{ __html: sanitizeHtml(genComponentHtml) }} />
              ) : (
                <div className="backdrop-blur-sm bg-white/10 border border-white/20 rounded-xl p-6">
                  <div className="font-medium text-white text-lg">{genTitle || "Payment"}</div>
                  <div className="text-purple-200 mt-2">
                    {genAmount ? `${genAmount} HBAR` : "Amount TBD"} → {to || "recipient"}
                  </div>
                  {genDescription && <div className="text-purple-300 text-sm mt-2">{genDescription}</div>}
                  {genMemo && <div className="text-purple-300 text-sm mt-1">Memo: {genMemo}</div>}
                </div>
              )}

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="block text-xs font-medium text-purple-200">Title</label>
                  <input 
                    className="w-full backdrop-blur-sm bg-white/10 border border-white/20 rounded-xl px-3 py-2 text-white
                               focus:border-purple-400 focus:ring-2 focus:ring-purple-400/50 transition-all duration-300" 
                    value={genTitle} 
                    onChange={(e) => setGenTitle(e.target.value)} 
                  />
                </div>
                <div className="space-y-2">
                  <label className="block text-xs font-medium text-purple-200">Amount (HBAR)</label>
                  <input 
                    type="number" 
                    min="0" 
                    step="0.000001" 
                    className="w-full backdrop-blur-sm bg-white/10 border border-white/20 rounded-xl px-3 py-2 text-white
                               focus:border-purple-400 focus:ring-2 focus:ring-purple-400/50 transition-all duration-300" 
                    value={genAmount ?? ""} 
                    onChange={(e) => setGenAmount(e.target.value ? Number(e.target.value) : null)} 
                  />
                </div>
                <div className="space-y-2">
                  <label className="block text-xs font-medium text-purple-200">Memo</label>
                  <input 
                    className="w-full backdrop-blur-sm bg-white/10 border border-white/20 rounded-xl px-3 py-2 text-white
                               focus:border-purple-400 focus:ring-2 focus:ring-purple-400/50 transition-all duration-300" 
                    value={genMemo} 
                    onChange={(e) => setGenMemo(e.target.value)} 
                  />
                </div>
                <div className="space-y-2">
                  <label className="block text-xs font-medium text-purple-200">Description</label>
                  <input 
                    className="w-full backdrop-blur-sm bg-white/10 border border-white/20 rounded-xl px-3 py-2 text-white
                               focus:border-purple-400 focus:ring-2 focus:ring-purple-400/50 transition-all duration-300" 
                    value={genDescription} 
                    onChange={(e) => setGenDescription(e.target.value)} 
                  />
                </div>
              </div>
            </div>
          )}

          {error && (
            <div className="backdrop-blur-sm bg-red-500/20 border border-red-400/30 rounded-xl px-4 py-3">
              <div className="text-red-300 text-sm">{error}</div>
            </div>
          )}

          <div className="flex items-center gap-4">
            <button 
              type="submit" 
              className="group relative px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl text-white font-semibold
                         hover:from-green-600 hover:to-emerald-600 transform hover:scale-105 transition-all duration-300
                         shadow-lg hover:shadow-green-500/25 flex items-center gap-2"
            >
              <Save className="w-4 h-4" />
              Save Link
              <div className="absolute inset-0 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl blur opacity-50 -z-10 group-hover:opacity-75 transition-opacity"></div>
            </button>
            
            {savedId && (
              <div className="backdrop-blur-sm bg-green-500/20 border border-green-400/30 rounded-xl px-4 py-2">
                <span className="text-green-300 text-sm flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  Saved! 
                  <Link 
                    href={`/pay/${savedId}`}
                    className="text-green-200 hover:text-white transition-colors underline flex items-center gap-1"
                  >
                    Open link <ExternalLink className="w-3 h-3" />
                  </Link>
                </span>
              </div>
            )}
          </div>
        </form>

        {/* Payment Links List */}
        <div className="w-full max-w-4xl backdrop-blur-md bg-white/10 border border-white/20 rounded-2xl p-8 shadow-xl">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <LinkIcon className="w-5 h-5 text-purple-300" />
              <h2 className="text-xl font-bold text-white">Your Payment Links</h2>
            </div>
            <Link 
              href="/pay" 
              className="text-purple-300 hover:text-white transition-colors text-sm flex items-center gap-1 group"
            >
              Go to Pay list 
              <ExternalLink className="w-4 h-4 group-hover:translate-x-0.5 transition-transform" />
            </Link>
          </div>
          
          {links.length === 0 ? (
            <div className="backdrop-blur-sm bg-white/5 border border-white/20 rounded-xl p-6 text-center">
              <Plus className="w-8 h-8 text-purple-300 mx-auto mb-2 opacity-50" />
              <div className="text-purple-200">No links yet. Create one above.</div>
            </div>
          ) : (
            <div className="grid grid-cols-1 gap-4">
              {links.map((l) => (
                <div 
                  key={l.id} 
                  className="group backdrop-blur-sm bg-white/5 border border-white/20 rounded-xl p-6 
                             hover:bg-white/10 hover:border-white/30 transition-all duration-300 
                             transform hover:scale-[1.02]"
                >
                  <div className="flex items-center justify-between">
                    <div className="space-y-2">
                      <div className="flex items-center gap-2">
                        <div className="font-medium text-white">{l.title}</div>
                        <span className="text-purple-300 text-sm font-mono bg-black/20 px-2 py-1 rounded">
                          /pay/{l.id}
                        </span>
                      </div>
                      <div className="text-purple-200 text-sm">
                        <span className="font-semibold">{l.amount} HBAR</span> → {l.to_account}
                        {l.memo && <span className="text-purple-300"> • {l.memo}</span>}
                      </div>
                      {l.total_paid > 0 && (
                        <div className="flex items-center gap-4 text-xs text-purple-300">
                          <span>Total paid: {l.total_paid} HBAR</span>
                          <span>Payments: {l.payments_count}</span>
                        </div>
                      )}
                    </div>
                    <Link 
                      href={`/pay/${l.id}`}
                      className="group/btn relative px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl text-white font-medium
                                 hover:from-purple-600 hover:to-pink-600 transform hover:scale-105 transition-all duration-300
                                 shadow-lg hover:shadow-purple-500/25 flex items-center gap-2"
                    >
                      <ExternalLink className="w-4 h-4" />
                      Open
                      <div className="absolute inset-0 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl blur opacity-50 -z-10 group-hover/btn:opacity-75 transition-opacity"></div>
                    </Link>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </main>

      <style jsx>{`
        @keyframes float {
          0%, 100% {
            transform: translateY(0px);
          }
          50% {
            transform: translateY(-20px);
          }
        }
      `}</style>
    </div>
  );
}